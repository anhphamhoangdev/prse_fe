import React, { useState } from 'react';
import { SearchHeaderAndFooterLayout } from '../../layouts/UserLayout';
import {CourseSidebar} from "../../components/course/course-detail/CourseSidebar";
import {CourseContent} from "../../components/course/course-detail/CourseContent";
import {CourseHero} from "../../components/course/course-detail/CourseHero";
import {CourseOverview} from "../../components/course/course-detail/CourseOverview";
import {CourseBasicDTO, CourseCurriculumDTO, FeedbackData} from "../../types/course";
import {useParams} from "react-router-dom";

interface FeedbackPages {
    [key: string]: FeedbackData[];  // index signature
}
const mockFeedbackPages: FeedbackPages = {
    page1: [
        {
            id: 1,
            studentId: 1,
            studentName: "Anh Long",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-6/433129123_385482517594012_376337141649238004_n.jpg",
            rating: 5,
            comment: "H·ªçc Spring Boot xong, gi·ªù t√¥i l√† b·∫≠c th·∫ßy c·ªßa @Autowired! Dependency Injection gi·ªù ƒë√¢y ch·ªâ l√† chuy·ªán nh·ªè nh∆∞ con th·ªè. Bean c·ªßa t√¥i m·ªçc l√™n t∆∞∆°i t·ªët nh∆∞ rau trong v∆∞·ªùn! üå±",
            createdAt: "2024-03-15T10:00:00"
        },
        {
            id: 2,
            studentId: 2,
            studentName: "Em Long Huy",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-6/456583606_1226900268512711_5713235832187306782_n.jpg",
            rating: 4,
            comment: "Ban ƒë·∫ßu t∆∞·ªüng Spring Boot kh√≥ nh∆∞ leo n√∫i Everest, ai ng·ªù gi·∫£ng vi√™n gi·∫£i th√≠ch d·ªÖ hi·ªÉu ƒë·∫øn m·ª©c t√¥i c√≤n code ƒë∆∞·ª£c trong l√∫c... ƒÉn ph·ªü! Gi·ªù REST API v·ªõi t√¥i ƒë∆°n gi·∫£n nh∆∞ tr·ªü b√†n tay üçú",
            createdAt: "2024-03-10T15:30:00"
        },
        {
            id: 3,
            studentId: 3,
            studentName: "Em Long Linh",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-1/434639741_2040379269666782_6839187750192260565_n.jpg",
            rating: 5,
            comment: "Sau kh√≥a h·ªçc n√†y, t√¥i ƒë√£ bi·∫øt c√°ch l√†m cho ·ª©ng d·ª•ng 'nh·∫£y m√∫a' theo √Ω m√¨nh! Spring Security gi·ªù kh√¥ng c√≤n l√† c∆°n √°c m·ªông n·ªØa, exception handling ƒë√£ tr·ªü th√†nh ng∆∞·ªùi b·∫°n th√¢n thi·∫øt. C√≥ th·ªÉ n√≥i t√¥i ƒë√£ t·ª´ 'g√† m·ªù' th√†nh 'ƒë·∫°i b√†ng' Java! ü¶Ö",
            createdAt: "2024-03-10T15:30:00"
        }
    ],
    page2: [
        {
            id: 4,
            studentId: 4,
            studentName: "Ch·ªã Long Lanh",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-6/433129123_385482517594012_376337141649238004_n.jpg",
            rating: 5,
            comment: "Tuy·ªát v·ªùi! Kh√≥a h·ªçc n√†y ƒë√£ gi√∫p t√¥i t·ª´ zero ƒë·∫øn hero trong Spring Boot. Instructor gi·∫£ng r·∫•t chi ti·∫øt v√† d·ªÖ hi·ªÉu! üöÄ",
            createdAt: "2024-03-09T14:20:00"
        },
        {
            id: 5,
            studentId: 5,
            studentName: "Anh Long L√™",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-6/456583606_1226900268512711_5713235832187306782_n.jpg",
            rating: 4,
            comment: "Spring Boot gi·ªù ƒë√£ tr·ªü th√†nh ng∆∞·ªùi b·∫°n th√¢n c·ªßa t√¥i. JPA, Security, ƒë·ªÅu kh√¥ng c√≤n l√† v·∫•n ƒë·ªÅ n·ªØa! üí™",
            createdAt: "2024-03-08T16:45:00"
        }
    ],
    page3: [
        {
            id: 6,
            studentId: 6,
            studentName: "Em Long L√™",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-1/434639741_2040379269666782_6839187750192260565_n.jpg",
            rating: 5,
            comment: "ƒê·∫ßu t∆∞ v√†o kh√≥a h·ªçc n√†y l√† quy·∫øt ƒë·ªãnh ƒë√∫ng ƒë·∫Øn nh·∫•t c·ªßa t√¥i trong nƒÉm nay. Ki·∫øn th·ª©c qu√° x·ªãn! üéØ",
            createdAt: "2024-03-07T09:15:00"
        }
    ]
};

const handleLessonClick = (chapterId: number, lessonId: number) => {
    // Handle navigation or other actions
    // router.push(`/learn/${courseId}/chapters/${chapterId}/lessons/${lessonId}`);
};

const handleAddToCart = () => {
    // X·ª≠ l√Ω th√™m v√†o gi·ªè h√†ng
    console.log('Adding to cart...');
};

const handleBuyNow = () => {
    // X·ª≠ l√Ω mua ngay
    console.log('Processing purchase...');
};

const handleStartLearning = () => {
    // C√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang h·ªçc
    console.log('Starting course...');
    // router.push(`/learn/${courseData.id}`);
};

const TabButton: React.FC<{
    tab: 'overview' | 'content';
    label: string;
    onClick: () => void;
    isActive: boolean;
}> = ({ tab, label, onClick, isActive }) => (
    <button
        className={`pb-4 px-2 ${isActive ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}
        onClick={onClick}
    >
        {label}
    </button>
);


const CourseDetail: React.FC = () => {

    const { id } = useParams<{ id: string }>();

    // STATE
    const [basicInfo, setBasicInfo] = useState<CourseBasicDTO>({
        id: 1,
        title: "Hu·ª∑ di·ªát Java Spring Boot",
        description: "L√†m quen v·ªõi l·∫≠p tr√¨nh Back-end b·∫±ng Spring Boot t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. X√¢y d·ª±ng RESTful API, x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô, t·ªëi ∆∞u hi·ªáu su·∫•t v√† tri·ªÉn khai ·ª©ng d·ª•ng th·ª±c t·∫ø.",
        imageUrl: "https://files.fullstack.edu.vn/f8-prod/courses/7.png",
        language: "Ti·∫øng Vi·ªát",
        originalPrice: 0,
        discountPrice: 150000,
        averageRating: 4.8,
        totalStudents: 1500,
        totalViews: 5000,
        lastUpdated: "2024-03-01T00:00:00",
        totalDuration: 162000,
        previewVideoUrl: "https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
        previewVideoDuration: 596,
        isEnrolled: true,

        instructor: {
            id: 1,
            fullName: "John Doe",
            avatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-1/416238737_2395657973950734_3403316050107008880_n.jpg",
            title: "Senior Java Developer & Instructor",
            totalCourses: 8,
            totalStudents: 35000
        },

        subcategories: [
            {
                id: 1,
                name: "Java Spring Boot",
            },
            {
                id: 2,
                name: "Back-end Development",
            }
        ],

        learningPoints: [
            {
                id: 1,
                content: "X√¢y d·ª±ng ·ª©ng d·ª•ng web v·ªõi Spring Boot t·ª´ A-Z"
            },
            {
                id: 2,
                content: "Thi·∫øt k·∫ø v√† ph√°t tri·ªÉn RESTful API chu·∫©n"
            },
            {
                id: 3,
                content: "L√†m vi·ªác v·ªõi c∆° s·ªü d·ªØ li·ªáu s·ª≠ d·ª•ng Spring Data JPA"
            },
            {
                id: 4,
                content: "X·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô v√† t·ªëi ∆∞u hi·ªáu su·∫•t"
            },
            {
                id: 5,
                content: "B·∫£o m·∫≠t ·ª©ng d·ª•ng v·ªõi Spring Security"
            },
            {
                id: 6,
                content: "Tri·ªÉn khai ·ª©ng d·ª•ng l√™n m√¥i tr∆∞·ªùng production"
            }
        ],

        prerequisites: [
            {
                id: 1,
                content: "Ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ Java"
            },
            {
                id: 2,
                content: "Hi·ªÉu bi·∫øt v·ªÅ l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP)"
            },
            {
                id: 3,
                content: "C∆° b·∫£n v·ªÅ HTML, SQL v√† RESTful API"
            }
        ]
    });

    const [curriculum, setCurriculum] = useState<CourseCurriculumDTO>({
        chapters: [
            {
                id: 1,
                title: "Gi·ªõi thi·ªáu Spring Boot",
                progress: {
                    status: 'completed',
                    completedAt: '2024-03-14T10:30:00',
                    progressPercent: 100
                },
                lessons: [
                    {
                        id: 1,
                        title: "T·ªïng quan v·ªÅ Spring Boot",
                        type: "video",
                        duration: "15:00",
                        progress: {
                            status: 'completed',
                            completedAt: '2024-03-12T15:30:00',
                            lastAccessedAt: '2024-03-12T16:45:00'
                        }
                    },
                    {
                        id: 2,
                        title: "C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ph√°t tri·ªÉn",
                        type: "text",
                        duration: "15:00",
                        progress: {
                            status: 'completed',
                            completedAt: '2024-03-13T09:20:00',
                            lastAccessedAt: '2024-03-13T10:15:00'
                        }
                    },
                    {
                        id: 3,
                        title: "Ki·ªÉm tra ki·∫øn th·ª©c Spring Boot c∆° b·∫£n",
                        type: "quiz",
                        duration: "14:00",
                        progress: {
                            status: 'completed',
                            completedAt: '2024-03-14T10:30:00',
                            lastAccessedAt: '2024-03-14T11:00:00'
                        }
                    }
                ]
            },
            {
                id: 2,
                title: "RESTful API v·ªõi Spring Boot",
                progress: {
                    status: 'in_progress',
                    progressPercent: 33.33
                },
                lessons: [
                    {
                        id: 4,
                        title: "REST Controller v√† Request Mapping",
                        type: "video",
                        duration: "20:00",
                        progress: {
                            status: 'completed',
                            completedAt: '2024-03-15T14:20:00',
                            lastAccessedAt: '2024-03-15T15:00:00'
                        }
                    },
                    {
                        id: 5,
                        title: "X·ª≠ l√Ω Request v√† Response",
                        type: "code",
                        duration: "3:00",
                        progress: {
                            status: 'not_started',
                        }
                    },
                    {
                        id: 6,
                        title: "Validation v√† Exception Handling",
                        type: "text",
                        duration: "3:00",
                        progress: {
                            status: 'not_started'
                        }
                    }
                ]
            },
            {
                id: 3,
                title: "Spring Data JPA & Database",
                progress: {
                    status: 'not_started',
                    progressPercent: 0
                },
                lessons: [
                    {
                        id: 7,
                        title: "Gi·ªõi thi·ªáu v·ªÅ Spring Data JPA",
                        type: "video",
                        duration: "25:00",
                        progress: {
                            status: 'not_started'
                        }
                    },
                    {
                        id: 8,
                        title: "L√†m vi·ªác v·ªõi Repository",
                        type: "text",
                        duration: "15:00",
                        progress: {
                            status: 'not_started'
                        }
                    }
                ]
            }
        ]
    });
    const [feedbacks, setFeedbacks] = useState<FeedbackData[]>([
        {
            id: 1,
            studentId: 1,
            studentName: "Anh Long",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-6/433129123_385482517594012_376337141649238004_n.jpg",
            rating: 5,
            comment: "H·ªçc Spring Boot xong, gi·ªù t√¥i l√† b·∫≠c th·∫ßy c·ªßa @Autowired! Dependency Injection gi·ªù ƒë√¢y ch·ªâ l√† chuy·ªán nh·ªè nh∆∞ con th·ªè. Bean c·ªßa t√¥i m·ªçc l√™n t∆∞∆°i t·ªët nh∆∞ rau trong v∆∞·ªùn! üå±",
            createdAt: "2024-03-15T10:00:00"
        },
        {
            id: 2,
            studentId: 2,
            studentName: "Em Long Huy",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-6/456583606_1226900268512711_5713235832187306782_n.jpg",
            rating: 4,
            comment: "Ban ƒë·∫ßu t∆∞·ªüng Spring Boot kh√≥ nh∆∞ leo n√∫i Everest, ai ng·ªù gi·∫£ng vi√™n gi·∫£i th√≠ch d·ªÖ hi·ªÉu ƒë·∫øn m·ª©c t√¥i c√≤n code ƒë∆∞·ª£c trong l√∫c... ƒÉn ph·ªü! Gi·ªù REST API v·ªõi t√¥i ƒë∆°n gi·∫£n nh∆∞ tr·ªü b√†n tay üçú",
            createdAt: "2024-03-10T15:30:00"
        },
        {
            id: 3,
            studentId: 3,
            studentName: "Em Long Linh",
            studentAvatarUrl: "https://scontent.fsgn19-1.fna.fbcdn.net/v/t39.30808-1/434639741_2040379269666782_6839187750192260565_n.jpg",
            rating: 5,
            comment: "Sau kh√≥a h·ªçc n√†y, t√¥i ƒë√£ bi·∫øt c√°ch l√†m cho ·ª©ng d·ª•ng 'nh·∫£y m√∫a' theo √Ω m√¨nh! Spring Security gi·ªù kh√¥ng c√≤n l√† c∆°n √°c m·ªông n·ªØa, exception handling ƒë√£ tr·ªü th√†nh ng∆∞·ªùi b·∫°n th√¢n thi·∫øt. C√≥ th·ªÉ n√≥i t√¥i ƒë√£ t·ª´ 'g√† m·ªù' th√†nh 'ƒë·∫°i b√†ng' Java! ü¶Ö",
            createdAt: "2024-03-10T15:30:00"
        }
    ]);

    const [feedbackMeta, setFeedbackMeta] = useState({ total: 3, page: 1, hasMore: true });
    const [expandedChapters, setExpandedChapters] = useState<Record<number, boolean>>({});
    const [activeTab, setActiveTab] = useState<'overview' | 'content'>('overview');
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingMore, setIsLoadingMore] = useState(false);


    // useEffect(() => {
    //     const fetchBasicInfo = async () => {
    //         setIsLoading(true);
    //         try {
    //             const data = await courseService.getCourseBasic(Number(id));
    //             setBasicInfo(data);
    //         } catch (error) {
    //             console.error('Failed to fetch course info:', error);
    //         } finally {
    //             setIsLoading(false);
    //         }
    //     };
    //
    //     if (id) fetchBasicInfo();
    // }, [id]);

    // Fetch curriculum when switching to content tab
    // useEffect(() => {
    //     const fetchCurriculum = async () => {
    //         if (activeTab === 'content' && !curriculum && id) {
    //             try {
    //                 const data = await courseService.getCourseCurriculum(Number(id));
    //                 setCurriculum(data);
    //             } catch (error) {
    //                 console.error('Failed to fetch curriculum:', error);
    //             }
    //         }
    //     };
    //
    //     fetchCurriculum();
    // }, [activeTab, curriculum, id]);

    // Load more feedbacks
    const loadMoreFeedbacks = async () => {
        if (!feedbackMeta.hasMore) return;

        setIsLoadingMore(true);
        try {
            // Gi·∫£ l·∫≠p API delay
            await new Promise(resolve => setTimeout(resolve, 1000));

            // L·∫•y data t∆∞∆°ng ·ª©ng v·ªõi page hi·ªán t·∫°i
            const nextPage = feedbackMeta.page;
            const newFeedbacks = mockFeedbackPages[`page${nextPage}`] || [];

            setFeedbacks(prev => [...prev, ...newFeedbacks]);
            setFeedbackMeta({
                total: feedbackMeta.total + newFeedbacks.length,
                page: nextPage + 1,
                hasMore: nextPage < 3 // C√≥ 3 pages
            });
        } catch (error) {
            console.error('Failed to fetch feedbacks:', error);
        } finally {
            setIsLoadingMore(false);
        }
    };

    const handleSubmitFeedback = async (rating: number, comment: string) => {
        if (!id) return;

        try {
            // await courseService.submitFeedback(Number(id), rating, comment);
            // Reload feedbacks after submission
            // const data = await courseService.getCourseFeedbacks(Number(id), 1);
            // setFeedbacks(data.items);
            // setFeedbackMeta({
            //     total: data.total,
            //     page: 2,
            //     hasMore: data.hasMore
            // });
        } catch (error) {
            console.error('Failed to submit feedback:', error);
        }
    };

    if (isLoading || !basicInfo) return (
        <div className="fixed inset-0 flex items-center justify-center">
            <div className="w-12 h-12 border-4 border-gray-200 rounded-full animate-spin border-t-blue-600"></div>
        </div>
    );

    return (
        <SearchHeaderAndFooterLayout>
            <CourseHero
                courseData={basicInfo}
                onAddToCart={handleAddToCart}
                onBuyNow={handleBuyNow}
                onStartLearning={handleStartLearning}
            />
            <div className="container mx-auto px-4 py-8">
                <div className="flex space-x-8">
                    <div className="w-2/3">
                        {/* Tabs */}
                        <div className="border-b border-gray-200 mb-6">
                            <div className="flex space-x-8">
                                <TabButton
                                    tab="overview"
                                    label="Overview"
                                    onClick={() => setActiveTab('overview')}
                                    isActive={activeTab === 'overview'}
                                />
                                <TabButton
                                    tab="content"
                                    label="Course Content"
                                    onClick={() => setActiveTab('content')}
                                    isActive={activeTab === 'content'}
                                />
                            </div>
                        </div>

                        {/* Tab Content */}
                        {activeTab === 'overview' ? (
                            <CourseOverview
                                courseData={basicInfo}
                                feedbacks={feedbacks}
                                hasMoreFeedbacks={feedbackMeta.hasMore}
                                onLoadMoreFeedbacks={loadMoreFeedbacks}
                                onSubmitFeedback={handleSubmitFeedback}
                            />
                        ) : (
                            curriculum && (
                                <CourseContent
                                    chapters={curriculum.chapters}
                                    expandedChapters={expandedChapters}
                                    setExpandedChapters={setExpandedChapters}
                                    isEnrolled={basicInfo.isEnrolled}
                                    onLessonClick={handleLessonClick}
                                />
                            )
                        )}
                    </div>

                    <div className="w-1/3">
                        <CourseSidebar
                            courseData={basicInfo}
                            onAddToCart={handleAddToCart}
                            onBuyNow={handleBuyNow}
                            onStartLearning={handleStartLearning}
                        />
                    </div>
                </div>
            </div>
        </SearchHeaderAndFooterLayout>
    );
};

export default CourseDetail;